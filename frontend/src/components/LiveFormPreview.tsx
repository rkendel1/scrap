import React, { useState, useEffect, useRef } from 'react';
import { EmbeddableForm } from './EmbeddableForm';
import { FormData, GeneratedForm, SaaSForm, FormField } from '../types/api';
import { CheckCircle, Lock, Copy, EyeOff, Palette, Type, Mic, Sparkles } from 'lucide-react'; // Import new Lucide icons

// Helper to determine if a color is light (simplified for demo)
const isLightColor = (color: string): boolean => {
  if (!color) return false;
  let r, g, b;

  // Handle hex colors
  if (color.startsWith('#')) {
    const hex = color.slice(1);
    if (hex.length === 3) { // #rgb
      r = parseInt(hex[0] + hex[0], 16);
      g = parseInt(hex[1] + hex[1], 16);
      b = parseInt(hex[2] + hex[2], 16);
    } else if (hex.length === 6) { // #rrggbb
      r = parseInt(hex.substring(0, 2), 16);
      g = parseInt(hex.substring(2, 4), 16);
      b = parseInt(hex.substring(4, 6), 16);
    } else {
      return false;
    }
  } 
  // Handle rgb/rgba colors
  else if (color.startsWith('rgb')) {
    const parts = color.match(/\d+/g)?.map(Number);
    if (parts && parts.length >= 3) {
      [r, g, b] = parts;
    } else {
      return false;
    }
  }
  // Handle hsl/hsla colors
  else if (color.startsWith('hsl')) {
    // For simplicity, treat HSL as dark if lightness is low
    const lightnessMatch = color.match(/hsla?\(\s*\d+\s*,\s*\d+%\s*,\s*(\d+)%\s*(?:,\s*\d*\.?\d+)?\)/);
    if (lightnessMatch && lightnessMatch[1]) {
      const lightness = parseInt(lightnessMatch[1]);
      return lightness > 70; // Arbitrary threshold for light HSL
    }
    return false;
  }
  else {
    return false; // Not a recognized color format
  }

  // Calculate luminance (simplified)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  return luminance > 0.7; // Threshold for "light"
};

interface LiveFormPreviewProps {
  formData?: Partial<FormData>; // Optional for editor mode
  generatedForm?: GeneratedForm | null; // Optional for editor mode
  createdForm?: SaaSForm | null; // Optional for editor mode
  user?: any;
  extractedDesignTokens?: any | null;
  extractedVoiceAnalysis?: any | null;
  onGetEmbedCodeClick?: (form: SaaSForm) => void; // Optional for editor mode
  isDestinationConfigured?: boolean; // Optional for editor mode
  className?: string;
  showEmbedCodeSection?: boolean; // New prop, optional
  onToggleEmbedCodeSection?: () => void; // New prop, optional

  // New props for direct form preview (e.g., in FormEditor)
  previewGeneratedForm?: GeneratedForm | null;
  hideEmbedSection?: boolean;
  hideAnalysisSection?: boolean;
}

export const LiveFormPreview: React.FC<LiveFormPreviewProps> = ({
  formData,
  generatedForm,
  createdForm,
  user,
  extractedDesignTokens,
  extractedVoiceAnalysis,
  onGetEmbedCodeClick,
  isDestinationConfigured,
  className,
  showEmbedCodeSection,
  onToggleEmbedCodeSection,
  previewGeneratedForm, // New prop
  hideEmbedSection = false, // New prop
  hideAnalysisSection = false, // New prop
}) => {
  const { url, purpose, destinationType } = formData || {}; // Use optional chaining

  const API_BASE = window.location.hostname === 'localhost' ? 'http://localhost:3001' : 'https://formcraft.ai';

  const getPreviewForm = (): GeneratedForm | null => {
    if (previewGeneratedForm) { // Prioritize direct preview form (for FormEditor)
      return previewGeneratedForm;
    }
    if (generatedForm) { // Then the form generated by the builder
      return generatedForm;
    }
    // If no generated form, but we have extracted data, show a mock form based on it
    if (extractedDesignTokens || extractedVoiceAnalysis) {
      const defaultStyling = {
        primaryColor: extractedDesignTokens?.primaryColors?.[0] || '#007bff',
        backgroundColor: extractedDesignTokens?.colorPalette?.find(color => isLightColor(color)) || '#ffffff',
        fontFamily: extractedDesignTokens?.fontFamilies?.[0] || 'Inter, system-ui, -apple-system, sans-serif',
        borderRadius: '8px',
        buttonStyle: 'solid',
        maxWidth: '500px',
      };

      let mockFields: FormField[] = [
        { type: 'email', name: 'email', label: 'Email Address', placeholder: 'Enter your email', required: true },
        { type: 'text', name: 'name', label: 'Name', placeholder: 'Your name', required: false },
      ];

      if (purpose?.toLowerCase().includes('feedback') || purpose?.toLowerCase().includes('message')) {
        mockFields.push({ type: 'textarea', name: 'message', label: 'Message', placeholder: 'Your message', required: true });
      } else if (purpose?.toLowerCase().includes('lead')) {
        mockFields.push({ type: 'text', name: 'company', label: 'Company', placeholder: 'Your company', required: false });
      }

      const descriptionText = extractedDesignTokens?.messaging?.[0] || 
                              (url ? `This form will adapt to the style of ${url}` : 'Start by entering a website URL in the chat to the left.');

      return {
        title: purpose ? `AI Form: ${purpose}` : 'Customer feedback',
        description: descriptionText,
        fields: mockFields,
        ctaText: purpose?.toLowerCase().includes('subscribe') ? 'Subscribe' : 'Submit',
        thankYouMessage: 'Thank you for your submission!',
        styling: defaultStyling,
      };
    }
    return null; // No form to render yet
  };

  const currentFormToRender = getPreviewForm();

  const formContent = currentFormToRender ? (
    <EmbeddableForm
      form={currentFormToRender}
      embedCode={createdForm?.embed_code || "preview-mode"}
      showBranding={false}
      onSubmit={(data) => console.log('Preview submission:', data)}
    />
  ) : null;

  const getDestinationText = () => {
    if (!destinationType) return '';
    switch (destinationType) {
      case 'email': return 'Email';
      case 'googlesheets': return 'Google Sheets';
      case 'slack': return 'Slack';
      case 'webhook': return 'Webhook';
      case 'zapier': return 'Zapier';
      default: return '';
    }
  };

  const renderDesignTokens = () => {
    if (!extractedDesignTokens && !extractedVoiceAnalysis) return null;

    const { colorPalette, fontFamilies, primaryColors } = extractedDesignTokens || {};
    const { tone, personalityTraits } = extractedVoiceAnalysis || {};

    return (
      <div style={{ 
        backgroundColor: '#ffffff',
        padding: '12px', /* Reduced padding */
        borderRadius: '8px',
        fontFamily: 'system-ui',
        /* Removed border and boxShadow */
        maxWidth: '500px',
        margin: '0 auto',
        textAlign: 'left',
        marginTop: '16px', /* Reduced margin-top */
        fontSize: '12px', /* Smaller base font size */
        color: '#555'
      }}>
        <h4 style={{ margin: '0 0 8px 0', color: '#333', fontSize: '14px', fontWeight: '600' }}>
          Website Analysis Summary
        </h4>
        <p style={{ margin: '0 0 10px 0', fontSize: '11px', color: '#666' }}>
          From <a href={url} target="_blank" rel="noopener noreferrer" style={{ color: '#007bff', textDecoration: 'none' }}>{url}</a>:
        </p>

        {colorPalette && colorPalette.length > 0 && (
          <div style={{ marginBottom: '8px' }}>
            <strong style={{ color: '#007bff' }}>Colors:</strong>{' '}
            <div style={{ display: 'inline-flex', flexWrap: 'wrap', gap: '4px', verticalAlign: 'middle' }}>
              {colorPalette.slice(0, 2).map((color: string, index: number) => ( /* Limit to 2 colors */
                <div key={index} style={{ 
                  width: '16px', height: '16px', borderRadius: '3px', backgroundColor: color, 
                  border: '1px solid #eee', display: 'inline-block' 
                }}></div>
              ))}
              {colorPalette.length > 2 && <span style={{ fontSize: '11px', color: '#888' }}> +{colorPalette.length - 2}</span>}
            </div>
          </div>
        )}

        {fontFamilies && fontFamilies.length > 0 && (
          <div style={{ marginBottom: '8px' }}>
            <strong style={{ color: '#28a745' }}>Fonts:</strong>{' '}
            <span style={{ fontSize: '12px', color: '#555' }}>
              {fontFamilies.slice(0, 1).join(', ')} {/* Limit to 1 font */}
              {fontFamilies.length > 1 && ` +${fontFamilies.length - 1}`}
            </span>
          </div>
        )}

        {tone && tone.primary && (
          <div style={{ marginBottom: '8px' }}>
            <strong style={{ color: '#ffc107' }}>Tone:</strong>{' '}
            <span style={{ fontSize: '12px', color: '#555' }}>{tone.primary}</span>
            {personalityTraits && personalityTraits.length > 0 && (
              <span style={{ fontSize: '12px', color: '#555' }}> ({personalityTraits.slice(0, 1).join(', ')})</span> /* Limit to 1 trait */
            )}
          </div>
        )}

        {primaryColors && primaryColors.length > 0 && (
          <div>
            <strong style={{ color: '#6f42c1' }}>Brand Colors:</strong>{' '}
            <div style={{ display: 'inline-flex', flexWrap: 'wrap', gap: '4px', verticalAlign: 'middle' }}>
              {primaryColors.slice(0, 2).map((color: string, index: number) => ( /* Limit to 2 brand colors */
                <div key={index} style={{ 
                  width: '16px', height: '16px', borderRadius: '3px', backgroundColor: color, 
                  border: '1px solid #eee', display: 'inline-block' 
                }}></div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  const scriptEmbedCode = createdForm?.embed_code
    ? `<script src="${API_BASE}/embed.js" data-form="${createdForm.embed_code}"></script>`
    : '<!-- Form embed code not available. -->';

  const handleCopyCode = () => {
    navigator.clipboard.writeText(scriptEmbedCode);
    alert('Embed code copied to clipboard!');
  };

  return (
    <div className={`live-preview-card ${className || ''}`}>
      <div className="preview-header">
        <h3>Live Form Preview</h3>
        {url && <p>Styled with design tokens from: {url}</p>}
      </div>
      
      <div className="live-preview-content-wrapper">
        <div
          style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            flexShrink: 0,
            flexDirection: 'column',
            width: '100%',
            padding: '20px',
            boxSizing: 'border-box'
          }}
        >
          {/* Render Form Content if available */}
          { currentFormToRender && formContent }

          {/* Render Destination Configured status if form is present and destination is configured */}
          { currentFormToRender && isDestinationConfigured && (
            <div className="form-submit-status" style={{ marginTop: '24px' }}>
              <CheckCircle size={16} /> Data will be sent to: {getDestinationText()}
            </div>
          )}

          {/* Render Placeholder if no form and no analysis is available */}
          { !currentFormToRender && !(extractedDesignTokens || extractedVoiceAnalysis) && (
            <div style={{ textAlign: 'center', padding: '20px', color: '#666' }}>
              <div className="sparkle-icon">✨</div>
              <h4 style={{ fontSize: '18px', marginBottom: '8px', color: '#333' }}>Your AI-Powered Form</h4>
              <p className="placeholder-text">
                Start by entering a website URL in the chat to the left to generate your form!
              </p>
            </div>
          )}

          {/* Render Design Tokens if available and not explicitly hidden */}
          { (extractedDesignTokens || extractedVoiceAnalysis) && !hideAnalysisSection && renderDesignTokens() }
        </div>
      </div>
      {currentFormToRender && (
        <div className="ai-generated-badge">
          ✅ AI-generated form preview.
        </div>
      )}
      {(extractedDesignTokens || extractedVoiceAnalysis) && !currentFormToRender && (
        <div className="ai-generated-badge" style={{ backgroundColor: '#d4edda', color: '#155724' }}>
          ✅ Design tokens extracted. Ready for form generation!
        </div>
      )}

      {/* Only show embed section if not hidden and createdForm exists */}
      {createdForm && !hideEmbedSection && (
        <div className="ready-to-embed-card">
          <h3>Ready to embed?</h3>
          <p>
            Your form is configured and ready to use. Get the embed code
            to add it to your website.
          </p>
          <button 
            onClick={() => onGetEmbedCodeClick?.(createdForm)} // Use optional chaining
            className="btn-embed-code"
          >
            {showEmbedCodeSection ? <EyeOff size={18} /> : <Lock size={18} />}
            {showEmbedCodeSection ? 'Hide Embed Code' : 'Get Embed Code'}
          </button>
          {!user && (
            <p style={{ 
              marginTop: '12px', 
              fontSize: '13px', 
              color: '#a0aec0',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px'
            }}>
              <Lock size={16} /> Sign in or register to activate your form and ensure it never expires.
            </p>
          )}

          {/* NEW: Embed Code Display Section */}
          {showEmbedCodeSection && (
            <div style={{ 
              marginTop: '24px', 
              backgroundColor: '#2d3748', // Darker background for code block
              borderRadius: '8px', 
              padding: '16px',
              textAlign: 'left'
            }}>
              <h4 style={{ color: 'white', fontSize: '16px', marginBottom: '12px' }}>
                JavaScript Embed Code
              </h4>
              <p style={{ color: '#a0aec0', fontSize: '13px', marginBottom: '12px' }}>
                Copy and paste this code into your website's HTML where you want the form to appear.
              </p>
              <div className="code-block" style={{ 
                backgroundColor: '#1a202c', // Even darker for code itself
                color: '#48bb78', // Greenish text for code
                border: '1px solid #4a5568',
                padding: '12px',
                borderRadius: '6px',
                overflowX: 'auto',
                whiteSpace: 'pre-wrap',
                wordBreak: 'break-all',
                fontSize: '13px'
              }}>
                {scriptEmbedCode}
              </div>
              <button 
                onClick={handleCopyCode}
                className="btn-embed-code"
                style={{ marginTop: '16px', backgroundColor: '#4a5568' }}
              >
                <Copy size={18} />
                Copy Code
              </button>
              <button 
                onClick={onToggleEmbedCodeSection}
                className="btn-embed-code"
                style={{ marginTop: '16px', marginLeft: '8px', backgroundColor: '#4a5568' }}
              >
                <EyeOff size={18} />
                Hide Code
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};