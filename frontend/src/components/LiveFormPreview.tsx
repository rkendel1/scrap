import React from 'react';
import { EmbeddableForm } from './EmbeddableForm';
import { FormData, GeneratedForm, SaaSForm, FormField } from '../types/api';

interface LiveFormPreviewProps {
  formData: Partial<FormData>;
  generatedForm: GeneratedForm | null;
  createdForm: SaaSForm | null;
  user?: any;
  extractedDesignTokens: any | null; // New prop
  extractedVoiceAnalysis: any | null; // New prop
}

// Helper to determine if a color is light (simplified for demo)
const isLightColor = (color: string): boolean => {
  if (!color) return false;
  let r, g, b;

  // Handle hex colors
  if (color.startsWith('#')) {
    const hex = color.slice(1);
    if (hex.length === 3) { // #rgb
      r = parseInt(hex[0] + hex[0], 16);
      g = parseInt(hex[1] + hex[1], 16);
      b = parseInt(hex[2] + hex[2], 16);
    } else if (hex.length === 6) { // #rrggbb
      r = parseInt(hex.substring(0, 2), 16);
      g = parseInt(hex.substring(2, 4), 16);
      b = parseInt(hex.substring(4, 6), 16);
    } else {
      return false;
    }
  } 
  // Handle rgb/rgba colors
  else if (color.startsWith('rgb')) {
    const parts = color.match(/\d+/g)?.map(Number);
    if (parts && parts.length >= 3) {
      [r, g, b] = parts;
    } else {
      return false;
    }
  }
  // Handle hsl/hsla colors
  else if (color.startsWith('hsl')) {
    // For simplicity, treat HSL as dark if lightness is low
    const lightnessMatch = color.match(/hsla?\(\s*\d+\s*,\s*\d+%\s*,\s*(\d+)%\s*(?:,\s*\d*\.?\d+)?\)/);
    if (lightnessMatch && lightnessMatch[1]) {
      const lightness = parseInt(lightnessMatch[1]);
      return lightness > 70; // Arbitrary threshold for light HSL
    }
    return false;
  }
  else {
    return false; // Not a recognized color format
  }

  // Calculate luminance (simplified)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  return luminance > 0.7; // Threshold for "light"
};


export const LiveFormPreview: React.FC<LiveFormPreviewProps> = ({
  formData,
  generatedForm,
  createdForm,
  user,
  extractedDesignTokens, // Use new prop
  extractedVoiceAnalysis, // Use new prop
}) => {
  const { url, purpose, formLayout } = formData;

  // Construct a mock GeneratedForm for preview if not yet generated by AI
  const getPreviewForm = (): GeneratedForm => {
    if (generatedForm) {
      return generatedForm;
    }

    // Default styling, potentially overridden by extracted tokens
    const defaultStyling = {
      primaryColor: extractedDesignTokens?.primaryColors?.[0] || '#007bff',
      backgroundColor: extractedDesignTokens?.colorPalette?.find(color => isLightColor(color)) || '#f8f9fa', // Try to find a light color, else use app's light gray
      fontFamily: extractedDesignTokens?.fontFamilies?.[0] || 'system-ui, -apple-system, sans-serif',
      borderRadius: '8px',
      buttonStyle: 'solid',
      maxWidth: '500px', // Default maxWidth for preview
    };

    // Mock fields based on purpose
    let mockFields: FormField[] = [
      { type: 'text', name: 'name', label: 'Your Name', placeholder: 'Enter your name', required: true },
      { type: 'email', name: 'email', label: 'Email', placeholder: 'your@email.com', required: true },
    ];

    if (purpose?.toLowerCase().includes('feedback') || purpose?.toLowerCase().includes('message')) {
      mockFields.push({ type: 'textarea', name: 'message', label: 'Message', placeholder: 'Your message', required: true });
    } else if (purpose?.toLowerCase().includes('lead')) {
      mockFields.push({ type: 'text', name: 'company', label: 'Company', placeholder: 'Your company', required: false });
    }

    // Use extracted messaging for description if available
    const descriptionText = extractedDesignTokens?.messaging?.[0] || 
                            (url ? `This form will adapt to the style of ${url}` : 'Start by entering a website URL.');

    return {
      title: purpose ? `AI Form: ${purpose}` : 'Your AI-Powered Form',
      description: descriptionText,
      fields: mockFields,
      ctaText: purpose?.toLowerCase().includes('subscribe') ? 'Subscribe' : 'Submit',
      thankYouMessage: 'Thank you for your submission!',
      styling: defaultStyling,
      formLayout: formLayout || 'inline', // Default formLayout for preview
    };
  };

  const previewForm = getPreviewForm();
  const showBranding = user?.subscription_tier !== 'paid';

  // Conditional rendering for different layouts
  const renderFormContent = () => {
    if (!url && !purpose && !generatedForm) {
      return (
        <p style={{ color: '#666', textAlign: 'center' }}>
          Enter a URL and purpose to see your form preview here.
        </p>
      );
    }

    const formComponent = (
      <EmbeddableForm
        form={previewForm}
        embedCode={createdForm?.embed_code || "preview-mode"} // Use actual embed code if available
        showBranding={showBranding}
        onSubmit={(data) => console.log('Preview submission:', data)} // Mock submission
      />
    );

    switch (previewForm.formLayout) {
      case 'modal':
        return (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 999,
            padding: '20px',
          }}>
            <div style={{
              backgroundColor: 'white',
              borderRadius: '8px',
              boxShadow: '0 4px 20px rgba(0,0,0,0.2)',
              maxWidth: previewForm.styling.maxWidth || '500px',
              width: '100%',
              maxHeight: '90vh',
              overflowY: 'auto',
              position: 'relative',
            }}>
              {formComponent}
            </div>
          </div>
        );
      case 'banner':
        return (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            backgroundColor: previewForm.styling.backgroundColor || '#fff',
            padding: '10px 20px',
            boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
            zIndex: 999,
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            borderBottom: '1px solid #e1e5e9',
          }}>
            <div style={{ maxWidth: previewForm.styling.maxWidth || '800px', width: '100%' }}>
              {formComponent}
            </div>
          </div>
        );
      case 'standalone':
        return (
          <div style={{
            minHeight: '100vh',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: previewForm.styling.backgroundColor || '#f8f9fa',
            padding: '20px',
          }}>
            {formComponent}
          </div>
        );
      case 'inline':
      default:
        return formComponent;
    }
  };

  return (
    <div className="card" style={{ position: 'sticky', top: '20px' }}> {/* Sticky for better UX */}
      <h3 style={{ marginBottom: '16px', textAlign: 'center' }}>Live Preview</h3>
      <div style={{
        border: '1px solid #e1e5e9',
        borderRadius: '8px',
        padding: '16px',
        backgroundColor: '#f8f9fa',
        minHeight: '300px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative', // Needed for absolute/fixed positioning of modal/banner
        overflow: 'hidden', // Hide overflow for banner/modal simulation
      }}>
        {renderFormContent()}
      </div>
      {generatedForm && (
        <div style={{
          marginTop: '16px',
          padding: '12px',
          backgroundColor: '#e8f5e8',
          borderRadius: '6px',
          border: '1px solid #c3e6cb',
          textAlign: 'center',
          fontSize: '14px',
          color: '#155724'
        }}>
          âœ… AI-generated form preview.
        </div>
      )}
    </div>
  );
};