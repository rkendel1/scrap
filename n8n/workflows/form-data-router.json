{
  "name": "Form Data Router",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "form-submission",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "form-webhook"
    },
    {
      "parameters": {
        "url": "http://backend:3001/api/customer-configs/{{ $json.customer_id }}",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer YOUR_INTERNAL_BACKEND_API_TOKEN"
        },
        "options": {}
      },
      "id": "fetch-customer-config",
      "name": "Fetch Customer Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get form data from webhook\nconst formData = $input.item.json.formData;\nconst customerId = $input.item.json.customer_id;\nconst formId = $input.item.json.formId;\n\n// Get customer routing rules from previous node (Fetch Customer Config)\nconst customerConfigResponse = $input.item.json.data;\n\nif (!customerConfigResponse || !customerConfigResponse.routing_config || !customerConfigResponse.routing_config.routing_rules) {\n  throw new Error(`Customer configuration or routing rules not found for: ${customerId}`);\n}\n\nconst routingRules = customerConfigResponse.routing_config.routing_rules;\n\nconst outputItems = [];\n\nfor (const rule of routingRules) {\n  let conditionMet = false;\n\n  // Simple condition evaluation (can be expanded for more complex logic)\n  if (rule.condition === 'all_forms') {\n    conditionMet = true;\n  } else if (rule.condition.startsWith('form_type == ')) {\n    // Example: form_type == 'contact'\n    const expectedFormType = rule.condition.split('== ')[1].replace(/['"]/g, '');\n    // Assuming form_data might contain a 'formType' field or similar\n    if (formData.formType && formData.formType === expectedFormType) {\n      conditionMet = true;\n    }\n  } else {\n    // Add more complex condition parsing here (e.g., using a library like 'json-logic-js')\n    console.warn(`Unsupported routing condition: ${rule.condition}`);\n  }\n\n  if (conditionMet) {\n    outputItems.push({\n      json: {\n        formData: formData,\n        customerId: customerId,\n        formId: formId,\n        rule: rule\n      }\n    });\n  }\n}\n\nreturn outputItems;"
      },
      "id": "process-routing-rules",
      "name": "Process Routing Rules",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "webhook-rule",
              "leftValue": "={{ $json.rule.action }}",
              "rightValue": "webhook",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-webhook",
      "name": "If Webhook",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "={{ $json.rule.target }}",
        "options": {
          "headers": "={{ $json.rule.headers }}"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "form_data",
              "value": "={{ $json.formData }}"
            },
            {
              "name": "customer_id", 
              "value": "={{ $json.customerId }}"
            },
            {
              "name": "form_id",
              "value": "={{ $json.formId }}"
            }
          ]
        }
      },
      "id": "send-to-webhook",
      "name": "Send to Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1100, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{ \"success\": true, \"message\": \"Form processed successfully by n8n\" }"
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "email-rule",
              "leftValue": "={{ $json.rule.action }}",
              "rightValue": "email",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-email",
      "name": "If Email",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "fromEmail": "n8n@formcraft.ai",
        "toEmail": "={{ $json.rule.target }}",
        "subject": "={{ $json.rule.template ? $json.rule.template.replace(/{{(\\w+)}}/g, (match, key) => $json.formData[key] || '') : 'New Form Submission' }}",
        "text": "={{ $json.rule.template ? $json.rule.template.replace(/{{(\\w+)}}/g, (match, key) => $json.formData[key] || '') : JSON.stringify($json.formData, null, 2) }}",
        "options": {}
      },
      "id": "send-email",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1100, 400]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Fetch Customer Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Customer Config": {
      "main": [
        [
          {
            "node": "Process Routing Rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Routing Rules": {
      "main": [
        [
          {
            "node": "If Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Webhook": {
      "main": [
        [
          {
            "node": "Send to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Send to Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Email": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}