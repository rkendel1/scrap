{
  "name": "Form Data Router",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "form-submission",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "form-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Read customer configuration\nconst fs = require('fs');\nconst path = '/home/node/.n8n/customer-configs/routing-config.json';\nlet config = {};\n\ntry {\n  const data = fs.readFileSync(path, 'utf8');\n  config = JSON.parse(data);\n} catch (error) {\n  console.error('Error reading config:', error);\n}\n\n// Get form data from webhook\nconst formData = $input.all()[0].json;\nconst customerId = formData.customer_id || 'customer-001';\n\n// Get customer routing rules\nconst customerConfig = config.customers[customerId];\n\nif (!customerConfig) {\n  throw new Error(`Customer configuration not found for: ${customerId}`);\n}\n\n// Return data with routing instructions\nreturn {\n  formData,\n  customerId,\n  routingRules: customerConfig.routing_rules,\n  customerName: customerConfig.name\n};"
      },
      "id": "code-processor",
      "name": "Process Configuration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "webhook-rule",
              "leftValue": "={{ $json.routingRules[0].action }}",
              "rightValue": "webhook",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-webhook",
      "name": "If Webhook",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [700, 200]
    },
    {
      "parameters": {
        "url": "={{ $json.routingRules[0].target }}",
        "options": {
          "headers": "={{ $json.routingRules[0].headers }}"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "form_data",
              "value": "={{ $json.formData }}"
            },
            {
              "name": "customer_id", 
              "value": "={{ $json.customerId }}"
            }
          ]
        }
      },
      "id": "http-webhook",
      "name": "Send to Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{ \"success\": true, \"message\": \"Form processed successfully\" }"
      },
      "id": "response",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1100, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Configuration": {
      "main": [
        [
          {
            "node": "If Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Webhook": {
      "main": [
        [
          {
            "node": "Send to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Send to Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}